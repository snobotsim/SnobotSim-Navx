
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'edu.wpi.first.NativeUtils' version '2.1.2'
    id "edu.wpi.first.GradleJni" version "0.3.1"
    id "cpp"
    id "java"
    id "eclipse"
}

ext.navx_library_version = "3.1.400"
ext.release_version = navx_library_version + "_V0_RC"

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://frcmaven.wpi.edu/artifactory/development/"
    }
//    maven {
//        url 'http://devsite.ctr-electronics.com/maven/release/'
//    }
}

ext.allwpilibVersion = {
    return '2020.1.2'
}

ext.getWpiUtilVersion = {
    return allwpilibVersion()
}

sourceSets {
    main {
        java {
            srcDirs += "ctre_source/api-java/java"
        }
    }
}


apply from: "config.gradle"
model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = getWpiUtilVersion()
            sharedConfigs = [ navx_simulator_jni: [] ]
        }
        halsim(DependencyConfig) {
            groupId = 'edu.wpi.first.hal'
            artifactId = 'hal-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = allwpilibVersion()
            sharedConfigs = [ navx_simulator_jni: []  ]
        }
    }

    components {
        navx_simulator_jni(JniNativeLibrarySpec) {
            baseName = 'navx_simulator_jni'

            enableCheckTask true
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions('athena')
            sources {
                cpp {
                    source {
                        srcDirs = ["src/main/native/cpp"]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include", 
                                   "ctre_source/cci/native/include", 
                                   "ctre_source/core/native/include"]
                    }
                }
            }
        }
    }
}


task packageNativeFilesInJar(type: Jar) {
    destinationDir = project.buildDir
    classifier = org.gradle.internal.os.OperatingSystem.current().getFamilyName() + getCurrentArch();
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX())
    {
        classifier = "osx" + getCurrentArch();
    }

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == "navx_simulator_jni")
                {
                    dependsOn binary.buildTask
                    from(binary.sharedLibraryFile) {

                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}


dependencies {

    testCompile 'edu.wpi.first.wpiutil:wpiutil-java:' + getWpiUtilVersion()
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + allwpilibVersion()
    testCompile 'edu.wpi.first.hal:hal-java:' + allwpilibVersion()
    testCompile 'edu.wpi.first.wpilibj:wpilibj-java:' + allwpilibVersion()

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.2.0'

    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'

    testRuntime packageNativeFilesInJar.outputs.files
    testCompile "com.kauailabs.navx.frc:navx-java:" + navx_library_version
//    testCompile "com.ctre.phoenix:api-java:" + ctre_library_version
//    testCompile "com.ctre.phoenix:wpiapi-java:" + ctre_library_version
}

System.out.println("Home: " + System.getProperty("user.home"))
System.out.println("M2 : " + System.getenv("M2_HOME"))

test {
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.FAILED,
               TestLogEvent.SKIPPED
               //TestLogEvent.STANDARD_OUT
        exceptionFormat "full"
    }
}

jar {
    exclude('com/ctre/**')
}

javadoc {
    failOnError = false
}


eclipse.classpath.file.whenMerged { classpath ->
    classpath.entries.each {
        if(it.path.contains("CtreSimulator")) {
            it.setNativeLibraryLocation("$rootDir/build/libs/ctreSimulation/shared/release")
        }
    }
}

tasks.withType(Test) {
    systemProperty "java.library.path", "$rootDir/build/libs/ctreSimulation/shared/release"
}

wrapper {
    gradleVersion = '5.0'
}

apply from: "publish.gradle"
